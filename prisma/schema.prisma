// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  password        String?
  image           String?
  role            Role      @default(member)
  location        String?
  emailVerified   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  eventsCreated   Event[]    @relation("PartnerEvents")
  reviewsAuthored Review[]   @relation("AuthorReviews")
  
  // --- ADDED --- Relations for new models
  discountsCreated  Discount[] @relation("PartnerDiscounts")
  favoriteEvents    Event[]    @relation("UserFavoriteEvents")
  favoriteDiscounts Discount[] @relation("UserFavoriteDiscounts")
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String?
  location      String
  imageUrl      String
  startDateTime DateTime
  endDateTime   DateTime
  price         String
  isFree        Boolean
  partnerId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  partner     User     @relation("PartnerEvents", fields: [partnerId], references: [id])
  reviews     Review[]
  categories  Category[]
  favoritedBy User[]     @relation("UserFavoriteEvents")
}

// --- NEW MODEL: Discount ---
// Represents a discount, offer, or deal from a partner.
model Discount {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  offer       String   // e.g., "20% Off", "Buy One Get One Free"
  promoCode   String?  @unique
  terms       String?
  startDate   DateTime
  endDate     DateTime
  partnerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  partner     User       @relation("PartnerDiscounts", fields: [partnerId], references: [id])

  // --- ADDED --- Relations for categories and favorites
  categories  Category[]
  favoritedBy User[]     @relation("UserFavoriteDiscounts")
}


// --- SUPPORTING MODELS ---

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  authorId  String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation("AuthorReviews", fields: [authorId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

// --- NEW MODEL: Category ---
// Used for filtering Events and Discounts
model Category {
  id        String     @id @default(uuid())
  name      String     @unique // e.g., "Food & Drink"
  slug      String     @unique // e.g., "food-and-drink"

  // Relations
  events    Event[]
  discounts Discount[]
}


// --- NEXT-AUTH MODELS ---
// Do not need to be modified

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// --- ENUMS ---

enum Role {
  member
  partner
  admin
}