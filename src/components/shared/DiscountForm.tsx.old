// FINAL CODE FOR: src/components/shared/DiscountForm.tsx

"use client";

import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useRouter } from "next/navigation";
import { createDiscount } from "@/lib/actions/discount.actions";
import { discountFormSchema, DiscountFormValues } from "@/types";

import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { FileUploader } from "@/components/shared/FileUploader";

// Preparing for the future "Update" functionality
type DiscountFormProps = {
  userId: string;
  type: "Create" | "Update";
  // discount?: Discount; // For pre-populating the form in "Update" mode later
  // discountId?: string;
};

export function DiscountForm({ userId, type }: DiscountFormProps) {
  const router = useRouter();
  
  const form = useForm<DiscountFormValues>({
    resolver: zodResolver(discountFormSchema),
    defaultValues: {
      title: "",
      description: "",
      discountValue: "",
      imageUrl: "",
      startDate: "",
      endDate: "",
      termsAndConditions: "",
      category: "",
    },
  });

  const { formState: { isSubmitting } } = form;

  async function onSubmit(values: DiscountFormValues) {
    if (type === 'Create') {
      try {
        const newDiscount = await createDiscount({ 
          discount: values, 
          userId: userId 
        });

        if (newDiscount) {
          form.reset();
          router.push(`/discounts/${newDiscount.id}`);
        }
      } catch (error) {
        console.error('Failed to create discount:', error);
      }
    }
    // We will add the 'Update' logic here later
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Discount Title</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Summer Sale" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="discountValue"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Offer Value</FormLabel>
                <FormControl>
                  <Input placeholder='e.g., "20% OFF" or "Buy One Get One"' {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea placeholder="Describe the offer..." className="resize-none" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
            control={form.control}
            name="imageUrl"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Offer Image</FormLabel>
                <FormControl>
                  <FileUploader onFieldChange={field.onChange} imageUrl={field.value} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
        />
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <FormField
            control={form.control}
            name="startDate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Start Date</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="endDate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>End Date</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="termsAndConditions"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Terms & Conditions</FormLabel>
              <FormControl>
                <Textarea placeholder="List any terms, conditions, or exclusions..." className="resize-none" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button type="submit" size="lg" className="w-full" disabled={isSubmitting}>
          {isSubmitting ? "Creating..." : "Create Discount"}
        </Button>
      </form>
    </Form>
  );
}